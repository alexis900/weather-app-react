{"version":3,"sources":["Components/Top/Weather.jsx","Components/Top/index.jsx","Components/Bottom/forecastDay.jsx","Components/Bottom/index.jsx","App.jsx","serviceWorker.js","Store.js","index.js"],"names":["Weather","props","state","this","location","temperature","text","icon","className","src","alt","Component","Top","isSelectLocationOpen","setState","prevState","e","locationName","target","value","eventEmitter","emit","Manager","Reference","ref","onClick","onToggleSelectLocation","bind","Popper","placement","style","arrowProps","data-placement","htmlFor","type","id","placeholder","onChange","onLocationNameChange","onSelectCity","forecastDay","day","dt_txt","weather","description","main","temp","forecastdays","map","dt_text","dt","console","log","key","App","cityName","isLoading","URLweather","URLforecast","axios","get","then","res","data","catch","err","error","list","updateWeather","on","Boolean","window","hostname","match","Store","EventEmitter","appName","React","Children","children","child","cloneElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e9b81c0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Weather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        const { location, temperature, text, icon } = this.props\r\n\r\n        return (\r\n            <div className=\"weather-container\">\r\n                <div className=\"header\">{ location }</div>\r\n                <div className=\"inner-container\">\r\n                    <div className=\"image\"><img src={\"//openweathermap.org/img/wn/\" + icon + \"@2x.png\"} alt=\"\"/></div>\r\n                    <div className=\"current-weather\">{ temperature }ยบ</div>\r\n                </div>\r\n                <div className=\"footer\">{ text }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./style.scss\";\r\n\r\nimport Weather from \"./Weather\";\r\n\r\nimport { Manager, Reference, Popper } from \"react-popper\";\r\n\r\nexport default class Top extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isSelectLocationOpen: false\r\n    };\r\n  }\r\n\r\n  onToggleSelectLocation() {\r\n    this.setState(prevState => ({\r\n      isSelectLocationOpen: !prevState.isSelectLocationOpen\r\n    }));\r\n  }\r\n\r\n  onLocationNameChange(e) {\r\n    this.setState({\r\n      locationName: e.target.value\r\n    });\r\n  }\r\n\r\n  onSelectCity() {\r\n    const { locationName } = this.state;\r\n    const { eventEmitter } = this.props;\r\n    eventEmitter.emit(\"updateWeather\", locationName);\r\n    this.setState({ isSelectLocationOpen: false });\r\n  }\r\n\r\n  render() {\r\n    const { isSelectLocationOpen } = this.state;\r\n    //const { eventEmitter } = this.props\r\n    return (\r\n      <div className=\"top-container\">\r\n        <div className=\"title\">Weather Up</div>\r\n        <Weather {...this.props} />\r\n\r\n        <Manager>\r\n          <Reference>\r\n            {({ ref }) => (\r\n              <button\r\n                className=\"btn btn-select-location\"\r\n                ref={ref}\r\n                onClick={this.onToggleSelectLocation.bind(this)}\r\n              >\r\n                Select location\r\n              </button>\r\n            )}\r\n          </Reference>\r\n          <Popper placement=\"top\">\r\n            {({ ref, style, placement, arrowProps }) =>\r\n              isSelectLocationOpen && (\r\n                <div\r\n                  className=\"popup-container\"\r\n                  ref={ref}\r\n                  style={style}\r\n                  data-placement={placement}\r\n                >\r\n                  <div className=\"form-container\">\r\n                    <label htmlFor=\"location-name\">Location Name</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"location-name\"\r\n                      placeholder=\"City Name\"\r\n                      onChange={this.onLocationNameChange.bind(this)}\r\n                    />\r\n                    <button\r\n                      className=\"btn btn-select-location\"\r\n                      onClick={this.onSelectCity.bind(this)}\r\n                    >\r\n                      Select\r\n                    </button>\r\n                  </div>\r\n                  <div ref={arrowProps.ref} style={arrowProps.style} />\r\n                </div>\r\n              )\r\n            }\r\n          </Popper>\r\n        </Manager>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class forecastDay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        const { day } = this.props\r\n        return (\r\n            <div className=\"forecastday-container\">\r\n                <div className=\"date\">\r\n                {day.dt_txt}\r\n                </div>\r\n                <div className=\"image\">\r\n                    <img src={\"http://openweathermap.org/img/wn/\"+ day.weather[0].icon +\"@2x.png\"} alt=\"\"/>\r\n                    </div>\r\n                <div className=\"text\">\r\n                    {day.weather[0].description}\r\n                    <br/>\r\n                    {day.main.temp}ยบ\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./style.scss\";\r\n\r\nimport ForecastDay from \"./forecastDay\";\r\n\r\nexport default class Top extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    const { forecastdays } = this.props;\r\n    return (\r\n      <div className=\"bottom-container\">\r\n        <div className=\"inner-container\">\r\n          {forecastdays &&\r\n            forecastdays.map((dt_text, dt) => {\r\n                console.log(dt_text)\r\n              return <ForecastDay day={dt_text} key={dt} />;\r\n            })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport './sass/App.scss'\r\n\r\nimport TopSection from './Components/Top/index'\r\nimport BottomSection from './Components/Bottom/index'\r\n\r\nimport axios from 'axios'\r\nconst YOUR_API_KEY = \"640f42aa2e9f82c4d0016da7dc0b7605\"\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      cityName: \"Barcelona\",\r\n      isLoading: true\r\n    }\r\n  }\r\n\r\n  updateWeather(){\r\n    const { cityName } = this.state\r\n    const URLweather = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${YOUR_API_KEY}&units=metric`\r\n    const URLforecast = `http://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${YOUR_API_KEY}&units=metric`\r\n    \r\n    axios\r\n      .get(URLweather)\r\n      .then(res => {\r\n        return res.data;\r\n       \r\n      })\r\n      .then(data => {\r\n        this.setState({\r\n          temperature: data.main.temp,\r\n          text: data.weather[0].description,\r\n          icon: data.weather[0].icon\r\n        });\r\n      })\r\n      .catch(err => {\r\n        if (err) console.error(\"Cannot fetch Weather Data from API, \", err);\r\n      });\r\n\r\n      axios\r\n      .get(URLforecast)\r\n      .then(res => {\r\n        return res.data;\r\n      })\r\n      .then(data => {\r\n        this.setState({\r\n          isLoading: false,\r\n          forecastdays: data.list\r\n        });\r\n        console.log(this.state)\r\n      })\r\n      .catch(err => {\r\n        if (err) console.error(\"Cannot fetch Weather Data from API, \", err);\r\n      });\r\n  }\r\n\r\n  componentDidMount(){\r\n  const { eventEmitter } = this.props\r\n\r\n  this.updateWeather()\r\n  \r\n  eventEmitter.on(\"updateWeather\", (data) => {\r\n    this.setState({\r\n      cityName: data\r\n    }, () => this.updateWeather())\r\n  })\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      isLoading,\r\n      cityName,\r\n      temperature,\r\n      text,\r\n      icon,\r\n      forecastdays\r\n    } = this.state;\r\n\r\n\r\n    return (\r\n      <div className=\"app-container\">\r\n        <div className=\"main-container\">\r\n          { isLoading && <h3>Loading Weather...</h3>}\r\n          { !isLoading &&  (\r\n          <div className=\"top-section\">\r\n            <TopSection \r\n              location={cityName} \r\n              temperature={temperature}\r\n              text={text} \r\n              icon={icon}\r\n              eventEmitter={this.props.eventEmitter}/>\r\n            </div>\r\n            )\r\n          }\r\n          <div className=\"top-section\"><BottomSection forecastdays={forecastdays}/></div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { EventEmitter } from \"events\"\r\nexport default class Store extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Main App State\r\n\r\n        this.eventEmitter = new EventEmitter()\r\n\r\n        this.state = {\r\n            appName: \"Weather Up\"\r\n        }\r\n    }\r\n    render() {\r\n        return React.Children.map(this.props.children, (child => {\r\n            return React.cloneElement(child, { \r\n                ...this.state,\r\n            eventEmitter: this.eventEmitter\r\n            });\r\n        }));\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Store from './Store'\r\n\r\nReactDOM.render(\r\n    <Store><App/></Store>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}